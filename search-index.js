crystal_doc_search_index_callback({"repository_name":"github.com/vladfaust/http-params-serializable","body":"# HTTP::Params::Serializable\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Build status](https://img.shields.io/travis/com/vladfaust/http-params-serializable/master.svg?style=flat-square)](https://travis-ci.com/vladfaust/http-params-serializable)\n[![API Docs](https://img.shields.io/badge/api_docs-online-brightgreen.svg?style=flat-square)](https://github.vladfaust.com/http-params-serializable)\n[![Releases](https://img.shields.io/github/release/vladfaust/http-params-serializable.svg?style=flat-square)](https://github.com/vladfaust/http-params-serializable/releases)\n[![Awesome](https://awesome.re/badge-flat2.svg)](https://github.com/veelenga/awesome-crystal)\n[![vladfaust.com](https://img.shields.io/badge/style-.com-lightgrey.svg?longCache=true&style=flat-square&label=vladfaust&colorB=0a83d8)](https://vladfaust.com)\n[![Patrons count](https://img.shields.io/badge/dynamic/json.svg?label=patrons&url=https://www.patreon.com/api/user/11296360&query=$.included[0].attributes.patron_count&style=flat-square&colorB=red&maxAge=86400)](https://www.patreon.com/vladfaust)\n[![Gitter chat](https://img.shields.io/badge/chat%20on-gitter-green.svg?colorB=ED1965&logo=gitter&style=flat-square)](https://gitter.im/vladfaust/http-params-serializable)\n\nThe HTTP params serialization module for [Crystal](https://crystal-lang.org/).\n\n## Supporters\n\nThanks to all my patrons, I can build and support beautiful Open Source Software! 🙏\n\n[Lauri Jutila](https://github.com/ljuti), [Alexander Maslov](https://seendex.ru), Dainel Vera\n\n*You can become a patron too in exchange of prioritized support and other perks*\n\n[![Become Patron](https://vladfaust.com/img/patreon-small.svg)](https://www.patreon.com/vladfaust)\n\n## About\n\nThis module is intended to provide a simple and convenient way to make an object to safely initialize from an HTTP params query (be it an URL query or `\"application/x-www-form-urlencoded\"` body). It tries to have an API almost the same as existing [`JSON::Serializable`](https://crystal-lang.org/api/0.27.0/JSON/Serializable.html) and [`YAML::Serializable`](https://crystal-lang.org/api/0.27.0/YAML/Serializable.html) modules, thus allowing to serialize infinitely-nested structures, including Arrays and Hashes.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  http-params-serializable:\n    github: vladfaust/http-params-serializable\n    version: ~> 0.3.0\n```\n\n2. Run `shards install`\n\n## Usage\n\nSimple example:\n\n```crystal\nrequire \"http-params-serializable\"\n\nstruct Params\n  include HTTP::Params::Serializable\n  getter id : Int32\nend\n\nparams = Params.from_query(\"id=42\")\npp params.id.class # => Int32\npp params.to_query # => \"id=42\"\n\nParams.from_query(\"\")\n# HTTP::Params::Serializable::ParamMissingError: Parameter \"id\" is missing\n\nParams.from_query(\"id=foo\")\n# HTTP::Params::Serializable::ParamTypeCastError: Parameter \"id\" cannot be cast from \"foo\" to Int32\n```\n\nAs you may expect, unions work as well:\n\n```crystal\nstruct Params\n  include HTTP::Params::Serializable\n  getter id : Int32 | Nil\nend\n\nparams = Params.from_query(\"id=\")\npp params.id # => nil\n```\n\nArrays are supported too:\n\n```crystal\nstruct Params\n  include HTTP::Params::Serializable\n  getter foo : Array(Float32)\nend\n\nparams = Params.from_query(\"foo[]=42.0&foo[]=43.5\")\npp params.foo[1] # => 43.5\npp params.to_query # => \"foo[]=42.0&foo[]=43.5\"\n```\n\nNested params are supported:\n\n```crystal\nstruct Params\n  include HTTP::Params::Serializable\n  getter nested : Nested\n\n  struct Nested\n    include HTTP::Params::Serializable\n    getter foo : Bool\n  end\nend\n\nparams = Params.from_query(\"nested[foo]=true\")\npp params.nested.foo # => true\npp params.to_query # => \"nested[foo]=true\"\n```\n\nNested arrays are supported as well:\n\n```crystal\nstruct Params\n  include HTTP::Params::Serializable\n  getter nested : Array(Nested)\n\n  struct Nested\n    include HTTP::Params::Serializable\n    getter foo : Array(Int32)\n  end\nend\n\nparams = Params.from_query(\"nested[0][foo][]=1&nested[0][foo][]=2\")\npp params.nested.first.foo.first # => [1, 2]\npp params.to_query # ditto\n```\n\nIt is also possible to alter the serialization behaviour with [`@[HTTP::Param]`](http://github.vladfaust.com/http-params-serializable/HTTP/Param.html) annotation. It currently supports two options: `:key` and `:converter`. Read more in [docs](http://github.vladfaust.com/http-params-serializable/HTTP/Param.html).\n\n```crystal\nstruct Params\n  include HTTP::Params::Serializable\n\n  @[HTTP::Param(key: \"the___Time\", converter: Time::EpochConverter)]\n  getter time : Time\nend\n\nparams = Params.from_query(\"the___Time=1544958806\")\npp params.time # => 2018-12-16 11:13:26.0 UTC\npp params.to_query # => \"the___Time=1544958806\"\n```\n\n### Custom serialization rules\n\nIf you want to know-how to make custom objects serializable, read [the Custom serialization rules Wiki page](https://github.com/vladfaust/http-params-serializable/wiki/Custom-serialization-rules).\n\n### Usage with [Onyx::REST](https://onyxframework.org)\n\n[Onyx::REST](https://github.com/onyxframework/rest) comes with an Action module, which implements common param sources parsing, which uses this shard under the hood:\n\n```crystal\nrequire \"onyx/rest\"\n\nstruct UpdateUser\n  include Onyx::REST::Action\n\n  params do\n    # Path params (\"/users/:id\")\n    path do\n      type id : Int32\n    end\n\n    # Query params (\"/users/42?password=secret\")\n    # Nesting and arrays natively supported\n    query do\n      type password : String\n      type foo do\n        type bar : Int32?\n      end\n    end\n\n    # Full support for form-data payloads\n    form do\n      type username : String?\n      type email : String?\n    end\n  end\n\n  errors do\n    type Forbidden(403)\n  end\n\n  def call\n    user = Onyx.query(User.where(id: params.path.id))\n    raise Forbidden.new unless user.password == params.query.password\n  end\nend\n\nOnyx.put \"/users/:id\", UpdateUser\nOnyx.listen\n```\n\n### Usage with [Kemal](http://kemalcr.com)\n\nIt's pretty simple to make your Kemal applications more safe:\n\n```crystal\nrequire \"kemal\"\nrequire \"http-params-serializable\"\n\nstruct Params\n  include HTTP::Params::Serializable\n  getter id : Int32\nend\n\nget \"/\" do |env|\n  if query = env.request.query\n    query_params = Params.from_query(query)\n\n    if query_params.id > 0\n      \"#{query_params.id} is positive\\n\"\n    else\n      \"#{query_params.id} is negative or zero\\n\"\n    end\n  else\n    \"Empty query\\n\"\n  end\nrescue ex : HTTP::Params::Serializable::Error\n  ex.message.not_nil! + \"\\n\"\nend\n\nKemal.run\n```\n\n```console\n$ curl http://localhost:3000?id=42\n42 is positive\n$ curl http://localhost:3000?id=-1\n-1 is negative or zero\n$ curl http://localhost:3000?id=foo\nParameter \"id\" cannot be cast from \"foo\" to Int32\n```\n\n## Development\n\n`crystal spec` and you're good to go.\n\n## Contributing\n\n1. Fork it (<https://github.com/vladfaust/http-params-serializable/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Vlad Faust](https://github.com/vladfaust) - creator and maintainer\n","program":{"html_id":"github.com/vladfaust/http-params-serializable/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/vladfaust/http-params-serializable","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP","path":"HTTP.html","kind":"module","full_name":"HTTP","name":"HTTP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"http-params-serializable/annotations.cr","line_number":1,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/annotations.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Param","path":"HTTP/Param.html","kind":"annotation","full_name":"HTTP::Param","name":"Param","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"http-params-serializable/annotations.cr","line_number":26,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/annotations.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"An HTTP parameter annotation.\n\nOptions:\n\n* *key* -- a key to use for (de)serializing.  By default all possible variations\nof the instance variable name are used (i.e. `\"foo_bar\"`, `\"fooBar\"`, `\"FooBar\"`,\n`\"foo-bar\"` and `\"Foo-Bar\"` for a `@foo_bar` variable)\n* *converter* -- a converter to use for casting.\nSome types implement converter forwarding, for example, `Array`:\n\n```\nrequire \"http-params-parseable\"\nrequire \"http-params-parseable/ext/time/epoch_converter\"\n\nstruct MyParams\n  include HTTP::Params::Serializable\n\n  @[HTTP::Param(converter: Time::EpochConverter, key: \"theTime\")]\n  getter time : Array(Time)\nend\n\nparams = MyParams.from_query(\"theTime[]=1544958806\")\npp params.time.class # => Array(Time)\n```","summary":"<p>An HTTP parameter annotation.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params","path":"HTTP/Params.html","kind":"struct","full_name":"HTTP::Params","name":"Params","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/vladfaust/http-params-serializable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/vladfaust/http-params-serializable/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/annotations.cr","line_number":29,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/annotations.cr"},{"filename":"http-params-serializable/errors.cr","line_number":1,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/http-params-serializable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"Represents a collection of http parameters and their respective values.","summary":"<p>Represents a collection of http parameters and their respective values.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","path":"HTTP/Params/Serializable.html","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"http-params-serializable/annotations.cr","line_number":30,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/annotations.cr"},{"filename":"http-params-serializable/errors.cr","line_number":2,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"},{"filename":"http-params-serializable.cr","line_number":6,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params","kind":"struct","full_name":"HTTP::Params","name":"Params"},"doc":"Including this module will make an object serializable to and from HTTP params query.\nIt adds a `.from_query(query : String)` and `#to_query : String` methods.","summary":"<p>Including this module will make an object serializable to and from HTTP params query.</p>","class_methods":[{"id":"build_path(path:Array(String)):String-class-method","html_id":"build_path(path:Array(String)):String-class-method","name":"build_path","doc":"Build query path from an array of *path* elements.\n\n```\nbuild_path([\"foo\", \"bar\", \"\"]) # => \"foo[bar][]\"\n```","summary":"<p>Build query path from an array of <em>path</em> elements.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Array(String)"}],"args_string":"(path : Array(String)) : String","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable.cr#L29","def":{"name":"build_path","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if path.size > 2\n  \"#{path[0]}[#{path[1..-1].join(\"][\")}]\"\nelse\n  if path.size == 2\n    \"#{path[0]}[#{path[1]}]\"\n  else\n    if path.size == 1\n      path[0].to_s\n    else\n      \"\"\n    end\n  end\nend"}},{"id":"build_path(*path:*T):StringforallT-class-method","html_id":"build_path(*path:*T):StringforallT-class-method","name":"build_path","doc":"Build query path from a tuple of *path* elements.\n\n```\nbuild_path(\"foo\", \"bar\", \"\") # => \"foo[bar][]\"\n```","summary":"<p>Build query path from a tuple of <em>path</em> elements.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"*T"}],"args_string":"(*path : <span class=\"o\">*</span><span class=\"t\">T</span>) : String forall T","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable.cr#L12","def":{"name":"build_path","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"*T"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"{% if T.size > 2 %}\n      \"#{path[0]}[#{path[1..-1].join(\"][\")}]\"\n    {% else %}{% if T.size == 2 %}\n      \"#{path[0]}[#{path[1]}]\"\n    {% else %}{% if T.size == 1 %}\n      path[0].to_s\n    {% else %}\n      \"\"\n    {% end %}{% end %}{% end %}"}},{"id":"split_path(path:String):Array(String)-class-method","html_id":"split_path(path:String):Array(String)-class-method","name":"split_path","doc":"Split query *path* into path elements.\n\n```\n\"foo[bar][]\".split # => [\"foo\", \"bar\", \"\"]\n```","summary":"<p>Split query <em>path</em> into path elements.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String) : Array(String)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable.cr#L46","def":{"name":"split_path","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"if path.size <= 1\n  return [path]\nend\n(path.split(\"][\")).map do |elem|\n  elem[(elem[0] == '[' ? 1 : 0)..(elem[-1] == ']' ? -2 : -1)]\nend\n"}}],"constructors":[],"instance_methods":[{"id":"to_http_param(builder:Builder,key:String?=nil)-instance-method","html_id":"to_http_param(builder:Builder,key:String?=nil)-instance-method","name":"to_http_param","doc":"Serialalize `self` into an HTTP params query with the *builder* at *key*.\nSee `#to_query` for instance variable rules.","summary":"<p>Serialalize <code>self</code> into an HTTP params query with the <em>builder</em> at <em>key</em>.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"Builder"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | ::Nil"}],"args_string":"(builder : Builder, key : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable.cr#L58","def":{"name":"to_http_param","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"Builder"},{"name":"key","doc":null,"default_value":"nil","external_name":"key","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% for ivar, i in @type.instance_vars %}\n      if var = @{{ ivar.name }}\n        {% key = ((ann = ivar.annotation(HTTP::Param)) && ann[:key]) || (ivar.name.stringify.underscore[0..0] + ivar.name.stringify.camelcase[1..-1]) %}\n\n        var_key = key ? key + \"[{{ key.id }}]\" : {{ key }}\n\n        {% scalar = (ivar.type.annotation(Scalar)) || (ivar.type.union? && ivar.type.union_types.all? do |t|\n  (t.annotation(Scalar)) || (t == Nil)\nend) %}\n\n        {% if converter = (ivar.annotation(HTTP::Param)) && (ivar.annotation(HTTP::Param))[:converter] %}\n          # `@{{ ivar.name }}` has a `{{ converter }}` as its converter\n          {% if scalar %}\n            # `{{ ivar.type }}` is scalar, therefore calling\n            # `{{ converter }}#to_http_param` with common arguments\n            {{ converter }}.to_http_param(var, builder, var_key)\n          {% else %}\n            # `{{ ivar.type }}` is not scalar, thus calling\n            # `@{{ ivar.name }}#to_http_param` with `converter:` argument\n            var.to_http_param(builder, var_key, converter: {{ converter }})\n          {% end %}\n        {% else %}\n          # `@{{ ivar.name }}` doesn't have a converter\n          var.to_http_param(builder, var_key)\n        {% end %}\n      end\n    {% end %}"}},{"id":"to_query:String-instance-method","html_id":"to_query:String-instance-method","name":"to_query","doc":"Serialalize `self` into an HTTP params query, returning a `String`.\nInstance variables are by default seralized under camelCased keys,\nunless explicitly specified with `@[HTTP::Param(key: \"mykey\")`.","summary":"<p>Serialalize <code>self</code> into an HTTP params query, returning a <code>String</code>.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable.cr#L91","def":{"name":"to_query","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"builder = HTTP::Params::Builder.new\nto_http_param(builder)\nbuilder.to_s\n"}}],"macros":[],"types":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/EmptyIndexForNonScalarArrayParamError","path":"HTTP/Params/Serializable/EmptyIndexForNonScalarArrayParamError.html","kind":"class","full_name":"HTTP::Params::Serializable::EmptyIndexForNonScalarArrayParamError","name":"EmptyIndexForNonScalarArrayParamError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/errors.cr","line_number":59,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"Raised when a non-scalar type has a empty (`\"[]\"`) index in the query.\nComplex (i.e. non-scalar) objects require explicit numeration for their instances, e.g.\nif `foo` is `Array(NestedParams(a : Int32, b : Int32))`, then `foo[][a]=1&foo[][b]=2`\nmakes no sense, because it's not clear whether is it the same object.","summary":"<p>Raised when a non-scalar type has a empty (<code>\"[]\"</code>) index in the query.</p>","class_methods":[],"constructors":[{"id":"new(param_path:Tuple,nested_path:Array(String))-class-method","html_id":"new(param_path:Tuple,nested_path:Array(String))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"param_path","doc":null,"default_value":"","external_name":"param_path","restriction":"Tuple"},{"name":"nested_path","doc":null,"default_value":"","external_name":"nested_path","restriction":"Array(String)"}],"args_string":"(param_path : Tuple, nested_path : Array(String))","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L60","def":{"name":"new","args":[{"name":"param_path","doc":null,"default_value":"","external_name":"param_path","restriction":"Tuple"},{"name":"nested_path","doc":null,"default_value":"","external_name":"nested_path","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(param_path, nested_path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","path":"HTTP/Params/Serializable/Error.html","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/errors.cr","line_number":4,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/EmptyIndexForNonScalarArrayParamError","kind":"class","full_name":"HTTP::Params::Serializable::EmptyIndexForNonScalarArrayParamError","name":"EmptyIndexForNonScalarArrayParamError"},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/ExplicitKeyForNonScalarParam","kind":"class","full_name":"HTTP::Params::Serializable::ExplicitKeyForNonScalarParam","name":"ExplicitKeyForNonScalarParam"},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/InvalidParamIndexError","kind":"class","full_name":"HTTP::Params::Serializable::InvalidParamIndexError","name":"InvalidParamIndexError"},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/NestedContentForScalarParamError","kind":"class","full_name":"HTTP::Params::Serializable::NestedContentForScalarParamError","name":"NestedContentForScalarParamError"},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/ParamIndexOutOfBoundsError","kind":"class","full_name":"HTTP::Params::Serializable::ParamIndexOutOfBoundsError","name":"ParamIndexOutOfBoundsError"},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/ParamMissingError","kind":"class","full_name":"HTTP::Params::Serializable::ParamMissingError","name":"ParamMissingError"},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/ParamTypeCastError","kind":"class","full_name":"HTTP::Params::Serializable::ParamTypeCastError","name":"ParamTypeCastError"}],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"A base class for all `HTTP::Params::Serializable` errors.","summary":"<p>A base class for all <code><a href=\"../../../HTTP/Params/Serializable.html\">HTTP::Params::Serializable</a></code> errors.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"build_path(*path)-instance-method","html_id":"build_path(*path)-instance-method","name":"build_path","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(*path)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L8","def":{"name":"build_path","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"HTTP::Params::Serializable.build_path(*path)"}},{"id":"path:Array(String)-instance-method","html_id":"path:Array(String)-instance-method","name":"path","doc":"The param query path. Can be used to display to clients.","summary":"<p>The param query path.</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L8","def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@path"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/ExplicitKeyForNonScalarParam","path":"HTTP/Params/Serializable/ExplicitKeyForNonScalarParam.html","kind":"class","full_name":"HTTP::Params::Serializable::ExplicitKeyForNonScalarParam","name":"ExplicitKeyForNonScalarParam","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/errors.cr","line_number":82,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"Raised when a non-scalar param is tried to be set explicitly with a single key.\nFor example, if `foo` is a complext object, then `foo=bar` makes no sense.","summary":"<p>Raised when a non-scalar param is tried to be set explicitly with a single key.</p>","class_methods":[],"constructors":[{"id":"new(path:Tuple,type)-class-method","html_id":"new(path:Tuple,type)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Tuple"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"args_string":"(path : Tuple, type)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L83","def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Tuple"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(path, type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/InvalidParamIndexError","path":"HTTP/Params/Serializable/InvalidParamIndexError.html","kind":"class","full_name":"HTTP::Params::Serializable::InvalidParamIndexError","name":"InvalidParamIndexError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/errors.cr","line_number":37,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"Raised when a param in the query has an invalid index (e.g. string value).\nFor example, if `foo` is `Array(Int32)`, then this query would raise: `\"foo[bar]=42\"`.","summary":"<p>Raised when a param in the query has an invalid index (e.g.</p>","class_methods":[],"constructors":[{"id":"new(path,value)-class-method","html_id":"new(path,value)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(path, value)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L38","def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(path, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/NestedContentForScalarParamError","path":"HTTP/Params/Serializable/NestedContentForScalarParamError.html","kind":"class","full_name":"HTTP::Params::Serializable::NestedContentForScalarParamError","name":"NestedContentForScalarParamError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/errors.cr","line_number":70,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"Raised when a scalar param has nested content in the query.\nFor example, if `foo` is `Int32`, then `foo[bar]=` makes no sense.","summary":"<p>Raised when a scalar param has nested content in the query.</p>","class_methods":[],"constructors":[{"id":"new(param_path:Tuple,nested_path:Array(String),type)-class-method","html_id":"new(param_path:Tuple,nested_path:Array(String),type)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"param_path","doc":null,"default_value":"","external_name":"param_path","restriction":"Tuple"},{"name":"nested_path","doc":null,"default_value":"","external_name":"nested_path","restriction":"Array(String)"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"args_string":"(param_path : Tuple, nested_path : Array(String), type)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L71","def":{"name":"new","args":[{"name":"param_path","doc":null,"default_value":"","external_name":"param_path","restriction":"Tuple"},{"name":"nested_path","doc":null,"default_value":"","external_name":"nested_path","restriction":"Array(String)"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(param_path, nested_path, type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/ParamIndexOutOfBoundsError","path":"HTTP/Params/Serializable/ParamIndexOutOfBoundsError.html","kind":"class","full_name":"HTTP::Params::Serializable::ParamIndexOutOfBoundsError","name":"ParamIndexOutOfBoundsError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/errors.cr","line_number":47,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"Raised when a param in the query has an index out of boundaries.\nFor example, if `foo` is `Array(Int32)`, then this query would raise: `\"foo[-1]=42\"`.","summary":"<p>Raised when a param in the query has an index out of boundaries.</p>","class_methods":[],"constructors":[{"id":"new(path:Tuple,index,size)-class-method","html_id":"new(path:Tuple,index,size)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Tuple"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":""}],"args_string":"(path : Tuple, index, size)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L48","def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Tuple"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(path, index, size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/ParamMissingError","path":"HTTP/Params/Serializable/ParamMissingError.html","kind":"class","full_name":"HTTP::Params::Serializable::ParamMissingError","name":"ParamMissingError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/errors.cr","line_number":14,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"Raised when a param is not nilable and missing from the query.","summary":"<p>Raised when a param is not nilable and missing from the query.</p>","class_methods":[],"constructors":[{"id":"new(path:Tuple)-class-method","html_id":"new(path:Tuple)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Tuple"}],"args_string":"(path : Tuple)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L15","def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Tuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/ParamTypeCastError","path":"HTTP/Params/Serializable/ParamTypeCastError.html","kind":"class","full_name":"HTTP::Params::Serializable::ParamTypeCastError","name":"ParamTypeCastError","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Error","kind":"class","full_name":"HTTP::Params::Serializable::Error","name":"Error"},{"html_id":"github.com/vladfaust/http-params-serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/errors.cr","line_number":23,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"Raised when a param cannot be casted to the desired type.","summary":"<p>Raised when a param cannot be casted to the desired type.</p>","class_methods":[],"constructors":[{"id":"new(path:Tuple,type,value)-class-method","html_id":"new(path:Tuple,type,value)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Tuple"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(path : Tuple, type, value)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L27","def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Tuple"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(path, type, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"type:String-instance-method","html_id":"type:String-instance-method","name":"type","doc":"The desired type which the param failed to be cast to.","summary":"<p>The desired type which the param failed to be cast to.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/errors.cr#L27","def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@type"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable/Scalar","path":"HTTP/Params/Serializable/Scalar.html","kind":"annotation","full_name":"HTTP::Params::Serializable::Scalar","name":"Scalar","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"http-params-serializable/annotations.cr","line_number":107,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/annotations.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/HTTP/Params/Serializable","kind":"module","full_name":"HTTP::Params::Serializable","name":"Serializable"},"doc":"Annotate a type to mark it as a scalar, so a single string query value will be tried to cast.\nFor example, `Int32` is scalar by default, thus in case `\"foo=42\"`, `\"42\"` is tried to cast to `Int32`.\n\nGood candidates to become scalar: `URI` and `Time`; for example:\n\n```\n@[HTTP::Params::Serializable::Scalar]\nclass URI\n  def to_http_param(builder : HTTP::Params::Builder, key : String)\n    builder.add(key, to_s)\n  end\n\n  def self.from_http_param(value : String)\n    return URI.parse(value)\n  end\nend\n\nstruct MyParams\n  include HTTP::Params::Serializable\n  getter uri : URI\nend\n\nparams = MyParams.from_query(\"uri=https://example.com\")\npp params.uri # => <URI @host=\"example.com\" ...>\n```\n\n`URI` and `Time::EpochConverter` extensions are shipped by default:\n\n```\nrequire \"http-params-parseable\"\nrequire \"http-params-parseable/ext/uri\"\nrequire \"http-params-parseable/ext/time/epoch_converter\"\n\nstruct MyParams\n  include HTTP::Params::Serializable\n\n  getter uri : URI\n\n  @[HTTP::Param(converter: Time::EpochConverter)]\n  getter time : Time\nend\n```\n\nIf you have annotated a type as scalar, then it must implement these methods:\n\n```\ndef to_http_param(builder : HTTP::Params::Builder, key : String)\n  # E.g. builder.add(key, self.to_s)\nend\n\ndef self.from_http_param(value : String) : self\n  # E.g. value.to_s\nend\n```\n\nOtherwise (if the type is not `Scalar`), the methods become a little more complex:\n\n```\ndef to_http_param(builder : HTTP::Params::Builder, key : String? = nil)\n  # Notice the *key* is nilable\nend\n\n# Or if you're using a converter on a param:\ndef to_http_param(builder : HTTP::Params::Builder, key : String? = nil, converter : C = nil) forall C\n  # ditto\nend\n\ndef self.from_http_param(query : String, path : Tuple) : self\n  # Notice the *path* argument\nend\n\n# Or if you're using a converter on a param:\ndef self.from_http_param(query : String, path : Tuple, converter : C = nil) : self forall C\n  # ditto\nend\n```","summary":"<p>Annotate a type to mark it as a scalar, so a single string query value will be tried to cast.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}]},{"html_id":"github.com/vladfaust/http-params-serializable/Time","path":"Time.html","kind":"struct","full_name":"Time","name":"Time","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/http-params-serializable/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/vladfaust/http-params-serializable/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/ext/time/epoch_converter.cr","line_number":4,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/time/epoch_converter.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/http-params-serializable/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Time` represents a date-time instant in\n[incremental time](https://www.w3.org/International/articles/definitions-time/#incremental_time)\nobserved in a specific time zone.\n\nThe calendaric calculations are based on the rules of the proleptic Gregorian\ncalendar as specified in [ISO 8601](http://xml.coverpages.org/ISO-FDIS-8601.pdf).\nLeap seconds are ignored.\n\nInternally, the time is stored as an `Int64` representing seconds from epoch\n(`0001-01-01 00:00:00.0 UTC`) and an `Int32` representing\nnanosecond-of-second with value range `0..999_999_999`.\n\nThe supported date range is `0001-01-01 00:00:00.0` to\n`9999-12-31 23:59:59.999_999_999` in any local time zone.\n\n### Telling the Time\n\nThere are several methods to retrieve a `Time` instance representing the\ncurrent time:\n\n```crystal\nTime.utc                                        # returns the current time in UTC\nTime.local Time::Location.load(\"Europe/Berlin\") # returns the current time in time zone Europe/Berlin\nTime.local                                      # returns the current time in current time zone\n```\n\nIt is generally recommended to keep instances in UTC and only apply a\nlocal time zone when formatting for user display, unless the domain logic\nrequires having a specific time zone (for example for calendaric operations).\n\n### Creating a Specific Instant\n\n`Time` instances representing a specific instant can be created by\n`.utc` or `.new` with the date-time specified as individual arguments:\n\n```\ntime = Time.utc(2016, 2, 15, 10, 20, 30)\ntime.to_s # => 2016-02-15 10:20:30 UTC\ntime = Time.local(2016, 2, 15, 10, 20, 30, location: Time::Location.load(\"Europe/Berlin\"))\ntime.to_s # => 2016-02-15 10:20:30 +01:00 Europe/Berlin\n# The time-of-day can be omitted and defaults to midnight (start of day):\ntime = Time.utc(2016, 2, 15)\ntime.to_s # => 2016-02-15 00:00:00 UTC\n```\n\n### Retrieving Time Information\n\nEach `Time` instance allows querying calendar data:\n\n```\ntime = Time.utc(2016, 2, 15, 10, 20, 30)\ntime.year        # => 2016\ntime.month       # => 2\ntime.day         # => 15\ntime.hour        # => 10\ntime.minute      # => 20\ntime.second      # => 30\ntime.millisecond # => 0\ntime.nanosecond  # => 0\ntime.day_of_week # => Time::DayOfWeek::Monday\ntime.day_of_year # => 46\ntime.monday?     # => true\ntime.time_of_day # => 10:20:30\n```\n\nFor querying if a time is at a specific day of week, `Time` offers named\npredicate methods, delegating to `#day_of_week`:\n\n```\ntime.monday? # => true\n# ...\ntime.sunday? # => false\n```\n\n### Time Zones\n\nEach time is attached to a specific time zone, represented by a `Location`\n(see `#location`).\n`#zone` returns the time zone observed in this location at the current time\n(i.e. the instant represented by this `Time`).\n`#offset` returns the offset of the current zone in seconds.\n\n```\ntime = Time.local(2018, 3, 8, 22, 5, 13, location: Time::Location.load(\"Europe/Berlin\"))\ntime          # => 2018-03-08 22:05:13 +01:00 Europe/Berlin\ntime.location # => #<Time::Location Europe/Berlin>\ntime.zone     # => #<Time::Location::Zone CET +01:00 (3600s) STD>\ntime.offset   # => 3600\n```\n\nUsing `.utc`, the location is `Time::Location::UTC`:\n\n```\ntime = Time.utc(2018, 3, 8, 22, 5, 13)\ntime          # => 2018-03-08 22:05:13.0 UTC\ntime.location # => #<Time::Location UTC>\ntime.zone     # => #<Time::Location::Zone UTC +00:00 (0s) STD>\ntime.offset   # => 0\n```\n\nA `Time` instance can be transformed to a different time zone while retaining\nthe same instant using `#in`:\n\n```\ntime_de = Time.local(2018, 3, 8, 22, 5, 13, location: Time::Location.load(\"Europe/Berlin\"))\ntime_ar = time_de.in Time::Location.load(\"America/Buenos_Aires\")\ntime_de # => 2018-03-08 22:05:13 +01:00 Europe/Berlin\ntime_ar # => 2018-03-08 18:05:13 -03:00 America/Buenos_Aires\n```\n\nBoth `Time` instances show a different local date-time, but they represent\nthe same date-time in the instant time-line, therefore they are considered\nequal:\n\n```\ntime_de.to_utc     # => 2018-03-08 21:05:13 UTC\ntime_ar.to_utc     # => 2018-03-08 21:05:13 UTC\ntime_de == time_ar # => true\n```\n\nThere are also two special methods for converting to UTC and local time zone:\n\n```\ntime.to_utc   # equals time.in(Location::UTC)\ntime.to_local # equals time.in(Location.local)\n```\n\n`#to_local_in` allows changing the time zone while keeping\nthe same local date-time (wall clock) which results in a different instant\non the time line.\n\n### Formatting and Parsing Time\n\nTo make date-time instances exchangeable between different computer systems\nor readable to humans, they are usually converted to and from a string\nrepresentation.\n\nThe method `#to_s` formats the date-time according to a specified pattern.\n\n```\ntime = Time.utc(2015, 10, 12, 10, 30, 0)\ntime.to_s(\"%Y-%m-%d %H:%M:%S %:z\") # => \"2015-10-12 10:30:00 +00:00\"\n```\n\nSimilarly, `Time.parse` and `Time.parse!` are used to construct a `Time` instance from date-time\ninformation in a string, according to a specified pattern:\n\n```\nTime.parse(\"2015-10-12 10:30:00 +00:00\", \"%Y-%m-%d %H:%M:%S %z\", Time::Location::UTC)\nTime.parse!(\"2015-10-12 10:30:00 +00:00\", \"%Y-%m-%d %H:%M:%S %z\")\n```\n\nSee `Time::Format` for all directives.\n\n### Calculations\n\n```\nTime.utc(2015, 10, 10) - 5.days # => 2015-10-05 00:00:00 +00:00\n\nspan = Time.utc(2015, 10, 10) - Time.utc(2015, 9, 10)\nspan.days          # => 30\nspan.total_hours   # => 720\nspan.total_minutes # => 43200\n```\n\n## Measuring Time\n\nThe typical time representation provided by the operating system is based on\na \"wall clock\" which is subject to changes for clock synchronization.\nThis can result in discontinuous jumps in the time-line making it not\nsuitable for accurately measuring elapsed time.\n\nInstances of `Time` are focused on telling time – using a \"wall clock\".\nWhen `Time.local` is called multiple times, the difference between the\nreturned instances is not guaranteed to equal to the time elapsed between\nmaking the calls; even the order of the returned `Time` instances might\nnot reflect invocation order.\n\n```\nt1 = Time.utc\n# operation that takes 1 minute\nt2 = Time.utc\nt2 - t1 # => ?\n```\n\nThe resulting `Time::Span` could be anything, even negative, if the\ncomputer's wall clock has changed between both calls.\n\nAs an alternative, the operating system also provides a monotonic clock.\nIts time-line has no specfied starting point but is strictly linearly\nincreasing.\n\nThis monotonic clock should always be used for measuring elapsed time.\n\nA reading from this clock can be taken using `.monotonic`:\n\n```\nt1 = Time.monotonic\n# operation that takes 1 minute\nt2 = Time.monotonic\nt2 - t1 # => 1.minute (approximately)\n```\n\nThe execution time of a block can be measured using `.measure`:\n\n```\nelapsed_time = Time.measure do\n  # operation that takes 20 milliseconds\nend\nelapsed_time # => 20.milliseconds (approximately)\n```","summary":"<p><code><a href=\"Time.html\">Time</a></code> represents a date-time instant in <a href=\"https://www.w3.org/International/articles/definitions-time/#incremental_time\" target=\"_blank\">incremental time</a> observed in a specific time zone.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/http-params-serializable/Time/EpochConverter","path":"Time/EpochConverter.html","kind":"module","full_name":"Time::EpochConverter","name":"EpochConverter","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"http-params-serializable/ext/time/epoch_converter.cr","line_number":5,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/time/epoch_converter.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/vladfaust/http-params-serializable/Time","kind":"struct","full_name":"Time","name":"Time"},"doc":null,"summary":null,"class_methods":[{"id":"from_http_param(value:String):Time-class-method","html_id":"from_http_param(value:String):Time-class-method","name":"from_http_param","doc":"Parse `Time` from an HTTP param as unix timestamp.","summary":"<p>Parse <code><a href=\"../Time.html\">Time</a></code> from an HTTP param as unix timestamp.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Time","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/time/epoch_converter.cr#L17","def":{"name":"from_http_param","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"begin\n  return Time.unix(value.to_i64)\nrescue ArgumentError\n  raise(TypeCastError.new)\nend"}},{"id":"to_http_param(value:Time,builder:HTTP::Params::Builder,key:String)-class-method","html_id":"to_http_param(value:Time,builder:HTTP::Params::Builder,key:String)-class-method","name":"to_http_param","doc":"Put *value* as a unix timestamp into the *builder* at *key*.","summary":"<p>Put <em>value</em> as a unix timestamp into the <em>builder</em> at <em>key</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"},{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"HTTP::Params::Builder"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(value : Time, builder : HTTP::Params::Builder, key : String)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/time/epoch_converter.cr#L7","def":{"name":"to_http_param","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"},{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"HTTP::Params::Builder"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.add(key, to_http_param(value))"}},{"id":"to_http_param(value:Time)-class-method","html_id":"to_http_param(value:Time)-class-method","name":"to_http_param","doc":"Return *value* as a unix timestamp string.","summary":"<p>Return <em>value</em> as a unix timestamp string.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"}],"args_string":"(value : Time)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/time/epoch_converter.cr#L12","def":{"name":"to_http_param","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Time"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.to_unix.to_s"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/vladfaust/http-params-serializable/Tuple","path":"Tuple.html","kind":"struct","full_name":"Tuple(*T)","name":"Tuple","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/http-params-serializable/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/vladfaust/http-params-serializable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/vladfaust/http-params-serializable/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/vladfaust/http-params-serializable/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/ext/tuple.cr","line_number":1,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/tuple.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/vladfaust/http-params-serializable/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/vladfaust/http-params-serializable/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A tuple is a fixed-size, immutable, stack-allocated sequence of values\nof possibly different types.\n\nYou can think of a `Tuple` as an immutable `Array` whose types for each position\nare known at compile time.\n\nA tuple can be created with the usual `new` method or with a tuple literal:\n\n```\ntuple = {1, \"hello\", 'x'} # Tuple(Int32, String, Char)\ntuple[0]                  # => 1\ntuple[1]                  # => \"hello\"\ntuple[2]                  # => 'x'\n```\n\nThe compiler knows what types are in each position, so when indexing\na tuple with an integer literal the compiler will return\nthe value in that index and with the expected type, like in the above\nsnippet. Indexing with an integer literal outside the bounds of the tuple\nwill give a compile-time error.\n\nIndexing with an integer value that is only known at runtime will return\na value whose type is the union of all the types in the tuple, and might raise\n`IndexError`.\n\nTuples are the preferred way to return fixed-size multiple return\nvalues because no memory is needed to be allocated for them:\n\n```\ndef one_and_hello\n  {1, \"hello\"}\nend\n\none, hello = one_and_hello\none   # => 1\nhello # => \"hello\"\n```\n\nGood examples of the above are `Number#divmod` and `Enumerable#minmax`.\n\nTuples can be splat with the `*` operator and passed to methods:\n\n```\ndef multiply(string, value)\n  string * value\nend\n\ntuple = {\"hey\", 2}\nvalue = multiply(*tuple) # same as multiply tuple[0], tuple[1]\nvalue                    # => \"heyhey\"\n```\n\nFinally, when using a splat argument in a method definition its type\nwill be a tuple of the call arguments:\n\n```\ndef splat_test(*args)\n  args\nend\n\ntuple = splat_test 1, \"hello\", 'x'\ntuple.class # => Tuple(Int32, String, Char)\ntuple       # => {1, \"hello\", 'x'}\n```","summary":"<p>A tuple is a fixed-size, immutable, stack-allocated sequence of values of possibly different types.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"[](range:Range(Int,Int))-instance-method","html_id":"[](range:Range(Int,Int))-instance-method","name":"[]","doc":"Similar to `Array#[](range)`, but for a tuple.","summary":"<p>Similar to <code>Array#[](range)</code>, but for a tuple.</p>","abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int))","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/tuple.cr#L3","def":{"name":"[]","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"result = Tuple.new\n{% for t, i in T %}\n      if ({{ i }} >= range.begin) && (\n        range.end > 0 ? {{ i }} <= range.end : {{ i }} <= {{ T.size }} + range.end\n      )\n        result = result + { at({{ i }}) }\n      end\n    {% end %}\nresult\n"}}],"macros":[],"types":[]},{"html_id":"github.com/vladfaust/http-params-serializable/URI","path":"URI.html","kind":"class","full_name":"URI","name":"URI","abstract":false,"superclass":{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/vladfaust/http-params-serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/vladfaust/http-params-serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"http-params-serializable/ext/uri.cr","line_number":5,"url":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/uri.cr"}],"repository_name":"github.com/vladfaust/http-params-serializable","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"This class represents a URI reference as defined by [RFC 3986: Uniform Resource Identifier\n(URI): Generic Syntax](https://www.ietf.org/rfc/rfc3986.txt).\n\nThis class provides constructors for creating URI instances from\ntheir components or by parsing their string forms and methods for accessing the various\ncomponents of an instance.\n\nBasic example:\n\n```\nrequire \"uri\"\n\nuri = URI.parse \"http://foo.com/posts?id=30&limit=5#time=1305298413\"\n# => #<URI:0x1003f1e40 @scheme=\"http\", @host=\"foo.com\", @port=nil, @path=\"/posts\", @query=\"id=30&limit=5\", ... >\nuri.scheme # => \"http\"\nuri.host   # => \"foo.com\"\nuri.query  # => \"id=30&limit=5\"\nuri.to_s   # => \"http://foo.com/posts?id=30&limit=5#time=1305298413\"\n```\n\n# URL Encoding\n\nThis class provides a number of methods for encoding and decoding strings using\nURL Encoding (also known as Percent Encoding) as defined in [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)\nas well as [`x-www-form-urlencoded`](https://url.spec.whatwg.org/#urlencoded-serializing).\n\nEach method has two variants, one returns a string, the other writes directly\nto an IO.\n\n* `.decode(string : String, *, plus_to_space : Bool = false) : String`: Decodes a URL-encoded string.\n* `.decode(string : String, io : IO, *, plus_to_space : Bool = false) : Nil`: Decodes a URL-encoded string to an IO.\n* `.encode(string : String, *, space_to_plus : Bool = false) : String`: URL-encodes a string.\n* `.encode(string : String, io : IO, *, space_to_plus : Bool = false) : Nil`: URL-encodes a string to an IO.\n* `.decode_www_form(string : String, *, plus_to_space : Bool = true) : String`: Decodes an `x-www-form-urlencoded` string component.\n* `.decode_www_form(string : String, io : IO, *, plus_to_space : Bool = true) : Nil`: Decodes an `x-www-form-urlencoded` string component to an IO.\n* `.encode_www_form(string : String, *, space_to_plus : Bool = true) : String`: Encodes a string as a `x-www-form-urlencoded` component.\n* `.encode_www_form(string : String, io : IO, *, space_to_plus : Bool = true) : Nil`: Encodes a string as a `x-www-form-urlencoded` component to an IO.\n\nThe main difference is that `.encode_www_form` encodes reserved characters\n(see `.reserved?`), while `.encode` does not. The decode methods are\nidentical except for the handling of `+` characters.\n\nNOTE: `HTTP::Params` provides a higher-level API for handling `x-www-form-urlencoded`\nserialized data.","summary":"<p>This class represents a URI reference as defined by <a href=\"https://www.ietf.org/rfc/rfc3986.txt\" target=\"_blank\">RFC 3986: Uniform Resource Identifier (URI): Generic Syntax</a>.</p>","class_methods":[{"id":"from_http_param(value:String)-class-method","html_id":"from_http_param(value:String)-class-method","name":"from_http_param","doc":"Parse `URI` from an HTTP param.","summary":"<p>Parse <code><a href=\"URI.html\">URI</a></code> from an HTTP param.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/uri.cr#L17","def":{"name":"from_http_param","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return URI.parse(value)"}}],"constructors":[],"instance_methods":[{"id":"to_http_param(builder:HTTP::Params::Builder,key:String)-instance-method","html_id":"to_http_param(builder:HTTP::Params::Builder,key:String)-instance-method","name":"to_http_param","doc":"Put `self` as an HTTP param into the *builder* at *key*.","summary":"<p>Put <code>self</code> as an HTTP param into the <em>builder</em> at <em>key</em>.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"HTTP::Params::Builder"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(builder : HTTP::Params::Builder, key : String)","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/uri.cr#L7","def":{"name":"to_http_param","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"HTTP::Params::Builder"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.add(key, to_http_param)"}},{"id":"to_http_param-instance-method","html_id":"to_http_param-instance-method","name":"to_http_param","doc":"Return `self` as an HTTP param string.","summary":"<p>Return <code>self</code> as an HTTP param string.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/vladfaust/http-params-serializable/blob/f9f6b68a7e825f6e5a1a38d957f5d2836440855b/src/http-params-serializable/ext/uri.cr#L12","def":{"name":"to_http_param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_s"}}],"macros":[],"types":[]}]}})